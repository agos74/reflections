5. Reflect: Initializing a Repository
What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, you create the .git hidden folder, visible with the "ls -a" command, which contains files and folders for repository management. There are no commits when a repository is created.

8. Reflect: Staging Area
How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area contains the files that we need to commit, it is a temporary parking area of the files between the working directory and the repository. You can use the "git add" command to park the files in the staging area, one at a time, and then archive them all with one commit in the repository. It is useful because it allows you to better organize the commit. With the "git status" command you can check which files are present in the staging area.

13. Reflect: Commit Size
How can you use the staging area to make sure you have one commit per logical change?

You have to add the files to the staging area one at a time, and then through a single commit command, the files in the repository of all the same logical files are updated.

16. Reflect: When to Use Branches
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Creating branches in a program helps in different situations. For example, if you want to make a major change to the program, such as introducing a new feature that takes much time to accomplish. Meanwhile, if a bug is reported to the program, it remains possible to correct it in the master branch, and keep quiet about new deployments in the secondary branch.

21. Reflect: Visualizing with Diagrams
How do the diagrams help you visualize the branch structure?

The diagrams let you know what commits cannot be reached by any branch. In this case, you can create a new branch for the current editing and set it as a current branch, using the "git checkout -b new_branch_name" command.

26. Reflect: Merging Two Branches
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Joining two branches together merges multiple changes to two different branches in one. After merging, you can delete the branch that we no longer need (in the end it's just a label) with the "git branch -d branch_to_delete" command. Diagramimng helps to understand how commits are related to parents.

33. Reflect: Automatic vs. Manual Merging
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic merging is very convenient when there are no conflicts between two versions of the same file. If two people have modified the same lines or functions as a file, then git cannot do it automatically, but manual intervention is needed to resolve the conflict.
