6. Reflect: Using diff to Find Bugs
How did viewing a diff between two versions of a file help you see the bug that was introduced?

This first part of the lesson was very interesting, how the difference between two files can help you find bugs in the code. Using diff on linux in a few seconds you can see the difference between two versions of a file.

8. Reflect: Using History for Efficiency
How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

Having access to the entire history of a file undoubtedly allows the programmer to be more efficient, because if a bug occurs after a change, you can verify when the bug did not occur by restoring an old version of the file, so see later at what incorrect modification the bug was introduced.

15. Reflect: Manual Commits
What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

The advantages we have in manually creating the commit are that there is a logical explanation of when to do them. The disadvantages are that if you write too much code before your next commit, too many changes might have been made, so it's not too useful in finding bugs. Instead, the automated versioning system, such as Google Docs, has the advantage that if you rarely edit a document, it is very useful, but if you make changes often it is resource-rich and unhelpful.

18. Reflect: Multi-File Commits
Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Saving multiple files all in one commit definitely has the advantages of editing all the files in a project for the same reason, for example, a new feature that requires, for its implementation, the modification of multiple files. If files are treated individually, such as Google Docs, it can only be useful if the files are not related to each other, so for programming it is a feature that serves very little.

22. Reflect: Using Git to View History
How can you use the commands git log and git diff to view the history of files?

Using "git log" command within the repository folder, you can see the commit list in chronological order, with its IDs useful to see the differences between the various commit through the "git diff" command. For example, if you want to see the difference between commit-1 and commit-2, you write "git diff ID-commit-1 ID-commit-2".

26. Reflect: Confidence from Version Control
How might using version control make you more confident to make changes that could break something?

By using the "git checkout" command you can go back to a previous version, through the commit ID that can be obtained with "the git log" command. This allows you to have more security during the changes as if you break something you can safely restore an earlier version and eventually find where the bug has broken that has broken everything.

31. Reflect: How Do You Want to Use Git?
Now that you have your workspace set up, what do you want to try using Git for?

Now I want to try using Git for my projects. I think it's very useful and it can give me a big hand in managing large projects.
